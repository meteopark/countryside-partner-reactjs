import React, {Component} from 'react';
import {bindActionCreators} from 'redux';
import {connect} from 'react-redux';
import * as importActions from '../../actions';
import styles from './Mentors.module.scss';
import {Spinner, Row, Col, Image, Jumbotron, Container, Button} from 'react-bootstrap';
import classNames from "classnames";
import * as reactIconFa from "react-icons/fa";
import InfiniteScroll from "react-infinite-scroll-component";

// https://www.npmjs.com/package/react-infinite-scroll-component
class Diary extends Component {

    constructor(props) {

        super(props);
        this.state = {
            hasMore: true,
            isLoading: true
        }

        window.onscroll = () => {

            if (!this.state.hasMore) return false;

            const windowHeight = "innerHeight" in window ? window.innerHeight : document.documentElement.offsetHeight;
            const body = document.body;
            const html = document.documentElement;
            const docHeight = Math.max(body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight);
            const windowBottom = windowHeight + (window.pageYOffset);

            if (windowBottom >= docHeight) this.loadItems();
        };
    }


    loadItems = () => {
console.log("@@@@@@@@");
        const {actionMentor, match, mapStateToPropsMentorDiaries} = this.props;

        if (mapStateToPropsMentorDiaries.last_page === mapStateToPropsMentorDiaries.current_page){
            this.setState({
                hasMore: false,
                isLoading: false
            });
        }

        actionMentor.getMentorDiaries(match.params.mentor, mapStateToPropsMentorDiaries.current_page + 1);
    }


    render() {

        const mentor = this.props.mapStateToPropsMentor;
        const diaries = this.props.mapStateToPropsMentorDiaries;

        const jumbotronStyle = {
            backgroundImage: 'url(/images/bg/profile-bg.png)',
            backgroundSize: 'cover',
            backgroundPosition: 'center',
            backgroundRepeat: 'no-repeat',
        };
        const jumbotronContentsStyle = {
            width: '100%',
            height: '100%',
            backgroundColor: 'rgba(0, 0, 0, 0.5)',
            color: '#ffffff'
        };

        return (

            <div>
                <div className={styles['blog-container-fluid']}>

                    <div style={jumbotronStyle}>
                        <Jumbotron fluid style={jumbotronContentsStyle}>
                            <Container>
                                <Row>
                                    <Col sm={3} className={styles['profile-container']}>
                                        <Image
                                            className={styles['profile-image']}
                                            roundedCircle
                                            src={mentor.profile_image ? mentor.profile_image : '/images/no-image.png'}
                                        />
                                        <br/>
                                        <Button variant="success" className={styles['mentoring-button']}>
                                            <reactIconFa.FaPaperPlane className={styles['icon']}/>
                                            멘토링 요청
                                        </Button>
                                    </Col>
                                    <Col className={styles['profile-info']}>
                                        <h1>{mentor.farm_name}</h1>
                                        <p>
                                            <reactIconFa.FaUserAlt className={styles['icon']}/>
                                            {mentor.name} ({mentor.id})
                                        </p>
                                        <p>
                                            <reactIconFa.FaHome className={styles['icon']}/>
                                            {mentor.address}
                                        </p>
                                        <p>
                                            <reactIconFa.FaSeedling className={styles['icon']}/>
                                            {mentor.crops}
                                        </p>
                                        <p>
                                            <reactIconFa.FaTractor className={styles['icon']}/>
                                            {mentor.career}
                                        </p>
                                        <p>
                                            <reactIconFa.FaPiedPiperHat className={styles['icon']}/>
                                            {mentor.homi}개
                                        </p>
                                        <p>
                                            <reactIconFa.FaUserFriends className={styles['icon']}/>
                                            멘토링 {mentor.mentoring_count}회
                                        </p>
                                    </Col>
                                </Row>
                            </Container>
                        </Jumbotron>
                    </div>


                    <div className={classNames('container', styles['blog-container'])}>

                        <p className={styles['blog-header']}>영농일지</p>

                        {diaries.data.map((diary) => (
                            <Row
                                key={diary.diary_srl}
                                className={classNames('justify-content-md-center', styles['blog-post-container'])}>
                                {
                                    diary.image ?
                                        <Col lg={{span: 3, order: 2}}>
                                            <Image
                                                src='https://cdn.pixabay.com/photo/2015/07/30/21/49/nature-868401_960_720.jpg'
                                                className={styles['blog-image']}
                                                fluid
                                            />
                                        </Col>
                                        : ""
                                }
                                <Col lg={{span: diary.image ? 7 : 10, order: 1}}>
                                    <div className={styles['blog-post']}>
                                        <h5 className={styles['blog-title']}>{diary.title}</h5>
                                        <p className={styles['blog-post-contents']}>{diary.contents}</p>
                                    </div>
                                    <p className={styles['timestamp']}>{diary.regdate}</p>
                                </Col>
                            </Row>
                        ))}
                        {/*<Row className={styles['empty-content']}><Col>등록 된 일지가 없습니다.</Col></Row>*/}

                        {this.state.isLoading && <div className={classNames("text-center", styles['infinite-loader'])}><Spinner animation="border" variant="success"/></div>}
                        {!this.state.hasMore && <Row className="text-center"><Col><img src="/images/ico/homi.png" className={styles['homi']}/></Col></Row>}
                    </div>
                </div>
            </div>
        );

    }

    componentDidMount() {

        const {actionMentor, match} = this.props;
        actionMentor.getMentor(match.params.mentor);
        actionMentor.getMentorDiaries(match.params.mentor, 1);
    }


    shouldComponentUpdate(nextProps, nextState) {


        if(nextProps.mapStateToPropsMentor === undefined) return false;
        if(nextProps.mapStateToPropsMentorDiaries.data && nextProps.mapStateToPropsMentorDiaries.data.length < 1) return false;

        return true;
    }


}

const mapStateToProps = (state) => ({

    mapStateToPropsMentor: state.mentor.mentor,
    mapStateToPropsMentorDiaries: state.mentor.diaries
})

const mapDispatchToProps = (dispatch) => ({

    actionMentor: bindActionCreators(importActions, dispatch),
})

export default connect(mapStateToProps, mapDispatchToProps)(Diary);
